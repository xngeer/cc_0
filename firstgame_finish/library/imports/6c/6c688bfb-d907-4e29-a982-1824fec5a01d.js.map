{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 主角跳跃高度\r\n        jumpHeight: 0,\r\n        // 主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        // 最大移动速度\r\n        maxMoveSpeed: 0,\r\n        // 加速度\r\n        accel: 0,\r\n        // 跳跃音效资源\r\n        jumpAudio: {\r\n            default: null,\r\n            url: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    setJumpAction: function () {\r\n        // 跳跃上升\r\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n        // 下落\r\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\r\n        var callback = cc.callFunc(this.playJumpSound, this);\r\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\r\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n\r\n    playJumpSound: function () {\r\n        // 调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n\r\n    setInputControl: function () {\r\n        var self = this;\r\n        //add keyboard input listener to jump, turnLeft and turnRight\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            // set a flag when key pressed\r\n            onKeyPressed: function(keyCode, event) {\r\n                switch(keyCode) {\r\n                    case cc.KEY.a:\r\n                        self.accLeft = true;\r\n                        self.accRight = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accLeft = false;\r\n                        self.accRight = true;\r\n                        break;\r\n                }\r\n            },\r\n            // unset a flag when key released\r\n            onKeyReleased: function(keyCode, event) {\r\n                switch(keyCode) {\r\n                    case cc.KEY.a:\r\n                        self.accLeft = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accRight = false;\r\n                        break;\r\n                }\r\n            }\r\n        }, self.node);\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        // 初始化跳跃动作\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n\r\n        // 加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // 主角当前水平方向速度\r\n        this.xSpeed = 0;\r\n\r\n        // 初始化键盘输入监听\r\n        this.setInputControl();\r\n    },\r\n\r\n    // called every frame\r\n    update: function (dt) {\r\n        // 根据当前加速度方向每帧更新速度\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // 限制主角的速度不能超过最大值\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // 根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed * dt;\r\n    },\r\n});\r\n"
  ]
}